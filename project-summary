// to create file :npx create-next-app@latest
// designed logos and required images using adobe express and using Head tag from next setup of favicon and title done
// created pages:products/[slug].js(dynamic routes),about.js,checkout.js,contact.js,hoodies.js,login.js,signup.js,mugs.js,order.js,tshirts.js
// created navbar and footer,along with using tailblocks for tailwind snippets

// created Navbar,Footer using tailwind blocks,navbar is made responsive ,used react-icons to get cart icon 

// // made navbar as shadow effect and made footer,navbar commom in all components by _app.js and designed tshirts page by randomly inserting images in img url,template is copied from tailblocks
// edited mugs,stickers,hoodies,tshirts page similar way
//made sideCart component,logic is make it absolute top-0 right-0 and made another logic where by clicking close(x) in sideCart ,by clicking cart sidebar comes from right with transition effect again clicking x button it goes right,to disabel scroll when it goes right,i made body:overflow-x-hidden
//to add animation sideBar has classNames:transform(to add translate or rotation similar effects),translate-x-full(going completey right out of screen horizantally),transition-transform(adding transitions to transform action ,in this case translate-x-full)
//by ref and toggleCart for sideBar,by clicking it using ref we check whether it has className :translate-x-full using ref.current.classList.contains("translate-x-full"),if it has we remove it and add translate-x-0 using .classList.add('className') and .classList.remove('translate-x-full') and vice versa it does has ,completed side bar ,which of height full a

//made product page with component from tailblocks and kept some dummy image

//added pincode serviceability check

//made cart state in _app.js,it is nearer to every component,and also as we know components in _app.js will appear on all components,we can supply cart components to all components from here
//made cart state,made function for adding items,saving them on localstorage,deleting them ,clearing them from localStorage,using useEffect upon loading fetching data from localStorage,sent data to all components via _app.js
//from props received to navbar,i displayed that data in sidebar,added functionality to it addToCart,removeFromCart,clearCart
//created checkout page,where we redirect when clicked on checkout on sidebar,in checkout page we take user order details like address etc and cart detail like from sidecart and use compoenets from tailwind

//made order page with tailblock component

//made logn and signup,forgot your password page

//setting up mongodb,installed mongoose npm i mongoose and setuped of modals which contains orders,products,users,to create modal new mongoose.Schema{{},timestamps:true}
//timestamps:true tells us created at ,updated at properties,modals are used to create data on mongodb

//creating middlewear to access db,which takes handler and returns it,first we check whether connection is there or not,then we connect to database and return handler
// middlewear const connectDb = handler => async (req,res) =>{
    //code
    // retuern handler(req,res)
// }
// mongoose.models={} in modals ,so that there wont be any error
//in api we export middleware which takes handler and returns it again after connection mongodb
// making apis for getProducts which returns products and add products which takes array of products and add them one by one in database
//made apis for updating ,adding,getting products

//displaying tshirts from database,using serverSideProps() on tshirts,writing backend logic there it self,
//we will encounter an error in serialisability ,solution:JSON.parse(JSON.stringify(products))and retrieving data from database and displaying them on pagess

//tshirts variant:converting data into json format such a way we can know which size,color for given product is available,with key as product_name,value as whole object,depending on its data we are populating tshirts page and its product page
//now we create object where along with products,we have to know each color size availability,we should show sizes such a way that there should be that size,color combination
//logic:first we highlight a color from products and show its respective sizes in dropdown and which other is clicked it becomes active and show its sizes,sizes and its respective sizes are there in variant
//logic:improves logic such that based on value of size in drop down ,its only shows its avialable colors
//logic3:data logic is each product has title and its size and  color,similarly there can be same product with different size and color combination,same product but with different size ,color ,slug,on retreiving data we retreive data on slug which contains basic data from db as slug is unique,also retireve its variants which have same title names,from that we sort data as size availables for given color like{red:[{xl:slug1},{s:slug2}] }
//on clicking the button,we will refreshe the page with selected size and color combination slug in variant data
//window.location=url//to change website url

//replaced dummy data on footer and products,cart

//making buy now button:directly add it into cart and redirecting to checkout page,iam writing buyNow function in _app.js instead of product page because its a asynhc function which will not immedieately show action

//react toastify:it is used to add notification popups to our website so easy,npm install --save react-toastify,import React from 'react';

//   import { ToastContainer, toast } from 'react-toastify';
//   import 'react-toastify/dist/ReactToastify.css';
  
//   function App(){
//     const notify = () => toast("Wow so easy!");

//     return (
//       <div>
//         <button onClick={notify}>Notify!</button>
//         <ToastContainer />
//       </div>
//     );
//   }