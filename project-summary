// to create file :npx create-next-app@latest
// designed logos and required images using adobe express and using Head tag from next setup of favicon and title done
// created pages:products/[slug].js(dynamic routes),about.js,checkout.js,contact.js,hoodies.js,login.js,signup.js,mugs.js,order.js,tshirts.js
// created navbar and footer,along with using tailblocks for tailwind snippets

// created Navbar,Footer using tailwind blocks,navbar is made responsive ,used react-icons to get cart icon 

// // made navbar as shadow effect and made footer,navbar commom in all components by _app.js and designed tshirts page by randomly inserting images in img url,template is copied from tailblocks
// edited mugs,stickers,hoodies,tshirts page similar way
//made sideCart component,logic is make it absolute top-0 right-0 and made another logic where by clicking close(x) in sideCart ,by clicking cart sidebar comes from right with transition effect again clicking x button it goes right,to disabel scroll when it goes right,i made body:overflow-x-hidden
//to add animation sideBar has classNames:transform(to add translate or rotation similar effects),translate-x-full(going completey right out of screen horizantally),transition-transform(adding transitions to transform action ,in this case translate-x-full)
//by ref and toggleCart for sideBar,by clicking it using ref we check whether it has className :translate-x-full using ref.current.classList.contains("translate-x-full"),if it has we remove it and add translate-x-0 using .classList.add('className') and .classList.remove('translate-x-full') and vice versa it does has ,completed side bar ,which of height full a

//made product page with component from tailblocks and kept some dummy image

//added pincode serviceability check

//made cart state in _app.js,it is nearer to every component,and also as we know components in _app.js will appear on all components,we can supply cart components to all components from here
//made cart state,made function for adding items,saving them on localstorage,deleting them ,clearing them from localStorage,using useEffect upon loading fetching data from localStorage,sent data to all components via _app.js
//from props received to navbar,i displayed that data in sidebar,added functionality to it addToCart,removeFromCart,clearCart
//created checkout page,where we redirect when clicked on checkout on sidebar,in checkout page we take user order details like address etc and cart detail like from sidecart and use compoenets from tailwind

//made order page with tailblock component

//made logn and signup,forgot your password page

//setting up mongodb,installed mongoose npm i mongoose and setuped of modals which contains orders,products,users,to create modal new mongoose.Schema{{},timestamps:true}
//timestamps:true tells us created at ,updated at properties,modals are used to create data on mongodb

//creating middlewear to access db,which takes handler and returns it,first we check whether connection is there or not,then we connect to database and return handler
// middlewear const connectDb = handler => async (req,res) =>{
    //code
    // retuern handler(req,res)
// }
// mongoose.models={} in modals ,so that there wont be any error
//in api we export middleware which takes handler and returns it again after connection mongodb
// making apis for getProducts which returns products and add products which takes array of products and add them one by one in database
//made apis for updating ,adding,getting products

//displaying tshirts from database,using serverSideProps() on tshirts,writing backend logic there it self,
//we will encounter an error in serialisability ,solution:JSON.parse(JSON.stringify(products))and retrieving data from database and displaying them on pagess

//tshirts variant:converting data into json format such a way we can know which size,color for given product is available,with key as product_name,value as whole object,depending on its data we are populating tshirts page and its product page
//now we create object where along with products,we have to know each color size availability,we should show sizes such a way that there should be that size,color combination
//logic:first we highlight a color from products and show its respective sizes in dropdown and which other is clicked it becomes active and show its sizes,sizes and its respective sizes are there in variant
//logic:improves logic such that based on value of size in drop down ,its only shows its avialable colors
//logic3:data logic is each product has title and its size and  color,similarly there can be same product with different size and color combination,same product but with different size ,color ,slug,on retreiving data we retreive data on slug which contains basic data from db as slug is unique,also retireve its variants which have same title names,from that we sort data as size availables for given color like{red:[{xl:slug1},{s:slug2}] }
//on clicking the button,we will refreshe the page with selected size and color combination slug in variant data
//window.location=url//to change website url

//replaced dummy data on footer and products,cart

//making buy now button:directly add it into cart and redirecting to checkout page,iam writing buyNow function in _app.js instead of product page because its a asynhc function which will not immedieately show action

//react toastify:it is used to add notification popups to our website so easy,npm install --save react-toastify,import React from 'react';

//   import { ToastContainer, toast } from 'react-toastify';
//   import 'react-toastify/dist/ReactToastify.css';
  
//   function App(){
//     const notify = () => toast("Wow so easy!");

//     return (
//       <div>
//         <button onClick={notify}>Notify!</button>
//         <ToastContainer />
//       </div>
//     );
//   }
//note:if we want to ToastContainer in more than one page we have to give it containerId like <ToastContainer containerId={"a"}/> ,<ToastContainer containerId={"b"}/>
//we gave toastify messages to addToCart,removeFromCart,clearCart,checkPincodeServicability

//replaced dummy text in hoodies,mugs,stickers from data in mongodb ,similarly like tshirts

//made backend for login and signup:creating user on database and verifying user,encryption password while storing,password is 'password' for" pervysage_123@gmail.com" and "uchiha_sharingan@gmail.com"

//added jwt token using npm i jsonwebtoken and jwt=jsonwebtoken.sign({data},secret_key,{expiresIn:"2h"}),upon login success ,i will send token to user ,where he will store it in localstorage,by checking localstorage for token we can verify that he is registered user
//generally jwt contains header:which tells about type of algoirithim,payload:which contains our data,secret key:a secret key which is used access and change jwt token,if user has jwt token he will allowed to home page else he will be redirected to login page

//created logout button,i created token taken from localstorage form _app.js to navbar through props and if user has jwt it shows logout button else login symbol,to use localstorage outside of page router ,we have to use it in useEffect,because next js bedefault runs on server where window object is not there,but useEffect wont runs on server  ,but on client side
//iam making logic such that onMouseEnter the icon ,dropdown should display and onMouseLeave it should disappear ,but problem whenever iam want to click dropdown,its becoming disappear because we are leaving icon,solution for this is:we make icon and dropdown inside same div
//added orders,logout,myAccount to dropdown

//adding topLoadingBar to page for that we are using npm i react-top-loading-bar and creating a progress state,keeping loading bar element <LoadingBar
    //     color='#f11946'
    //     progress={progress}
    //     onLoaderFinished={() => setProgress(0)}
    //   />
//to make progress bar we have to setProgress bar like setProgress(100),so we are using router events which are routerStart,routerComplete
//when routerUrl about to change 
    // router.events.on('routeChangeStart', ()=>setProgress(40))//on router events we have to give event name left ,function on right
    // when routerUrl is completed loading :router.events.on('routerChangeComplete',()=>setProgress(100)),we wait property of loading bar to wait after reaching 100% for loading effect like <LoadingBar waitingTime={400}/>

// created orders page in which is used i kept table form tailwind components and used getServerSideProps from which i will get Orders data from db,in myaccounts page i made change such that if user is not logged in ,then he will logged out ,similarly for homw page if user not logged in ,he will redirected to login page    

//to use environmental variables in next js the variable should be prefixed with NEXT_PUBLIC_VariableName
// .env -> NEXT_PUBLIC_HOST='host value'
//iam using environmental variable to replace HOSt which localhostL3000 , jwt_secret_key,mongo_uri

//in checkout page ,disabling pay buttom until all other fields are full,populating state and city just by entering pincode,changed userId with email in order modal,added orderId,
//readOnly={true} for input tag makes it only readable not editable,disabled={true} makes button disabled,
//creating order request in backend to create order,creating random id using "Date.now()",on clicking pay button,order will be created

//so i created order confirmation page which shows all the products ordered,by getting orderid by which mongodb stores data,this orderId will be taken by query from url when user enteres,by that id we fetch from mongodb and display them
//made myOrder api request which extract user info using jwt token using jwt.verify(token,secretKey,(err,decode)=>{}),using which we can get users email to fetch orders from mongodb
//made my order page which will display all orders on given email,onclicking details it will redirect to that order using id,in my orders all orders made on same email,on clicking that order it will show items in that order in another page

//made functionality be getting state and city data using pincode entered,i used url,which postoffice url to get location details from pincode,what we cant directly access it from front end due to cors policy,so we have to make backend request 
//how to make cors ,first make a middle ware,npm i cors,
// import Cors from cors
//let cors=Cors({methods:["GET","POST","HEAD"],origin:"*"})
// function runMiddleware(req,res,fn)=>{
//     return new Promise((resolve,reject)=>{
//         fn(req,res,(result)=>{
//             if(result instanceof Error) {
//                 return reject(result)
//             }
//             return resolve(result)
//         })
//     })
// }
// export default cors
// export {runMiddleware}

// in api request
// import cors from '...'
// import runMiddleware from '...'
// await runMiddleware(req,res,cors)
//using this request ,we can get state and city details and populate them in state,city using useREf and useeffect with dependency of checkoutInfo.pincode ,view checkout.js for implementation

//suppose if someone tampered with localstorage with duplicate data,then it will hectic issue,i made checkTampering api req to check data in localstorage with data in mongodb,on clicking pay Button,we will check possibility of tampering,if it happens we will not proceed with order
//suppose if some product went out of stock,we cant let user order it,i made a backend request that checks qty of cart to avaialableQty ,if qty in db is less than cart then we wont let user order it,which is done after user clicked pay button
//made updateWithCart .js for reducing cart quantity when order has placed,because of order quantity will reduce
//made email in checkout fixed with email you enter with login

//made checkout and clear cart button as disabled if cart is empty